1.Integer 等包装类的自动装箱自动拆箱机制
  Integer a= 100 ===> JVM编译成 Integer.valueOf(100);
  范围 -128~127 之间，可以通过设置虚拟机参数来设置，该机制的作用节省内存提高性能，对于调用构造器创建的Integer 对象则无效。
  通过设置JVM参数：-XX:AutoBoxCacheMax=xx 来设置最大值
  public static Integer valueOf(int i) {
    if (i >= IntegerCache.low && i <= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
  }
2.Long 与Integer 一样（-128~127）
3.Byte（-128~127）,但是byte的取值范围是 -128~127,基于这个原因所以byte是对全部的值进行缓存
  public static Byte valueOf(byte b) {
        final int offset = 128;
        return ByteCache.cache[(int)b + offset];
    }
4.位运算
  <<左移：10<<2 ==> 10*2*2, M<<N 表示 M乘以2的N次方
  >>右移：10>>2 ==>10/2/2,-10>>2 ==> -10/2/2 + 1,M>>N当 M为正数时，除以2的N次方取商，当M为负数时,除以2的N次方加1
  >>无符号右移，高位补0
  ^按 位异或：1^1 = 0 按位异或可以比较两个数字是否相等，它利用 1^1=0，0^0=0的原理
